env:
    global:
        - secure: "nmeFcr3znbsDOjHf+1mm9OgJ2QCJc85WMFvmMWfQ3OAW57IHOUEa5jw/NH2qFxgYAqPPyNz2nfsismvftvX8fFGBzVqGSdvox7YuzUqL+/xzncLo+rknqPTXux7p0trQUG/6TqwxEYF9zdciu127h615BrputEdyTy0MUY67Sy93dyldobyoeU5vkBGSXnrwobxoKPb4ii5VvZ+6xGwqoMowmJK0l+jtOeKvNm7wfKdhnm5otBXahxS/L5w3I/CwP4tcRPrSBiqxGdiozdF6TrXEql6YGEsjBlKV0sXdVa/FlhdWvnarSk9XS7bydAEYs4UAboAtJwMkD5D8OIRH9iiv2aRbPNuQDHqrBHtg4IWqOLR5JNA3k7T6T/k2LkeCZ7e79q+JeiLbnZtTVls3dZ7FbZiEWooJHpRMlbOqHCjLXu+W23P+f/mepHvhsNYf01aeds5e+KWl6s17c1nroV97FjXh9I/ISc0+tAJL8W6o6ur5R/8AJz/n+tCVuZbDogg+CS2cI1wPBvrQ8F1KbzAnVBlqObhV5oirFEzWnrgtgo0QFAbsufkiG2zPt/VqVm2F8j2a7/P18s7dhKXUvRQhSRuxhhs9Q4Od3/RJBTVXWF9m6hspUS0A2Rz6TQ7UiL8YL6RyCjTIRF1QOubzAK6R4X4f8HyCbuU3hoRbW0Y="
        - secure: "8GY/CdBQXLUmUvNGuOgRfLkNpzEud0t+JtRBj5/9MVPYL0XA6ejJsPFqNWBVlzEc6o5WVk5NsogW1lJksmCAKARSRnAb1MelBDWZjsTuQxtJRpmnjK5xPG4peT618TddZClkFhECyaW7pEbcNXDPcclla5kh9kXCc9Nfo0gRMogXLEqUqMrZPioT4dgsq2OcoTqDJbbsvqvTnRQCS6f53z7639+SLMn9H+R9juDr/NJ3CvjaEKWx/JuZCMdt0GyHH1R0G6/Vf2rbX1wndzIsEcoowfmqw0QI66o+7kXiw6+giUxumk8DPRXmV+uEuxVtnPYvprAPgoXOogZ/3Upih6A9IbtAeAbwJzucOJy7XSQEnitA0ycGmzSEElgYGvC1T1cWlZLuUSwl5cv5J2TPTV1KLHzVYdG/qC+Mgwy+PYNSlJrjHEInYRAX/cksAZGoAPP+NDj4OjWhPGUgfBBSrn9AckueVJ3itIZgk/9yQdFjq7bD9Z75c0llAYr9tlUYsCeYOBoEeno/9hvIXbhzzbCsGp6nijxNAC2Se1/Ph63cmT+lHC579DLj1sQtXa9ts52qSfrbxmxOIt32t+IMbncqr471TEK4jN8HLNZFiPAgv9vNd6v+R9i/NIBRSfYpM+B4aWxYjZ2SNJCUuR+Bw6ivtkX5b90wp0kodO7Y/Ps="
        - secure: "b1MhQFncplCKuy3zXb5esY3oooF0ZXoW1Y/pLYxq6u8S5sDpZgiYTA8syMd+DkQ93ndCc3v3fKZ1HeTv9ZefzSo7g8XWNk7gSQf/9tMVEVLHosns69ocJkzZ+PjA9ljMQXiQw4E3LQ5OXnCsQj9mUe2T0NzPNpguMz5x5gl3psAf/NE8P3KGDVLEeqFPZEoYSM8FVAmDZf02O645skXVpvtz54vNIvsI49E/yXS1pxtik3I1hMVszmTMRKxpSDN2UaaRzH27YGmdjNqFKCRu2d+6ow/LpOOO3RlRJF8mvlm3gXxumOJI19jwxdTZDZv7L3OdIxA60CDZAD7PiIXjxkk4cUtEmohYdbvewODju/JWNBtVpjN9umIj1W7s/qq1mEY593gJj04EEcVRpiJAkR4TSNel++cYszo/sNBpW7DGKAeR5XINB/Jux+BAGExwXsNlo+Q/Wx6hpX5G7oaYXqqg+DMicYj9sXL8HruBsMKDuok98jmbt97zmx6Bxk3ZV6p3zYC/6CSHMqJbuPiODeIZ2FUyYw81AzeNmaPUZyjr663HAFPMKXjUB/1y7KPCtpMtDeR6lEq9XQ5vp8I8VEf0iObQ2i3v/pNzy8bWNBPoTI3rIaxQJm6QHskWVI2kZxjCF8gigHiz1komVMjcI1JoGNikiTgXMj0L0G6Mp40="
  

language: python
sudo: false

cache: 
    apt: true
    directories:
        - $HOME/.pip-cache
        - $HOME/gpg_install_prefix
        - $HOME/.cache/pip
        - $HOME/download

python:
  - "2.7"
  - "3.5"
  - "3.6"
  - "3.7"
  - "3.8"
  #
before_install:
  - pip install pip -U
  - pip install -r requirements.txt -U

install:
  - travis_retry pip install -e .
    
script: 
  - travis_wait ./run_tests.py

after_success: 
    - codecov 
    - gpg --version
    - gpg2 --version
    - export GPG_EXECUTABLE=gpg2
    - openssl version
    - | 
        __heredoc__='''
        # THE SCRIPT IN THIS HEREDOC IS USED TO SETUP SECRET REPO VARIABLES
        #
        # Load or generate secrets
        source $(secret_loader.sh)
        echo $TWINE_USERNAME
        echo $TWINE_PASSWORD
        echo $CI_GITHUB_SECRET

        # In your repo directory run the command to ensure travis recognizes the repo
        # It will say: Detected repository as <user>/<repo>, is this correct? |yes|
        # Answer yes before running the encrypt commands.
        travis status

        # encrypt relevant travis variables
        SECURE_TWINE_USERNAME=$(travis encrypt --no-interactive TWINE_USERNAME=$TWINE_USERNAME)
        SECURE_TWINE_PASSWORD=$(travis encrypt --no-interactive TWINE_PASSWORD=$TWINE_PASSWORD)
        SECURE_CI_GITHUB_SECRET=$(travis encrypt --no-interactive CI_GITHUB_SECRET=$CI_GITHUB_SECRET)
        echo "
        Add the following lines to your .travis.yml

        env:
            global:
                - secure: $SECURE_TWINE_USERNAME
                - secure: $SECURE_TWINE_PASSWORD
                - secure: $SECURE_CI_GITHUB_SECRET
        "

        # HOW TO ENCRYPT YOUR SECRET GPG KEY
        IDENTIFIER="travis-ci-Erotemic"
        KEYID=$(gpg --list-keys --keyid-format LONG "$IDENTIFIER" | head -n 2 | tail -n 1 | awk '{print $1}' | tail -c 9)
        echo "KEYID = $KEYID"

        # Export plaintext gpg public keys, private keys, and trust info
        mkdir -p dev
        gpg --armor --export-secret-keys $KEYID > dev/travis_secret_gpg_key.pgp
        gpg --armor --export $KEYID > dev/travis_public_gpg_key.pgp
        gpg --export-ownertrust > dev/gpg_owner_trust

        # Encrypt gpg keys and trust with CI secret
        TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_public_gpg_key.pgp > dev/travis_public_gpg_key.pgp.enc
        TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_secret_gpg_key.pgp > dev/travis_secret_gpg_key.pgp.enc
        TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/gpg_owner_trust > dev/gpg_owner_trust.enc
        echo $KEYID > dev/public_gpg_key

        source $(secret_unloader.sh)

        # Look at what we did, clean up, and add it to git
        ls dev/*.enc
        rm dev/gpg_owner_trust dev/*.pgp
        git status
        git add dev/*.enc
        git add dev/public_gpg_key

        '''  # <hack vim "regex" parser> '
    - |
        # Install a more recent version of GPG
        # https://gnupg.org/download/
        export GPG_INSTALL_PREFIX=$HOME/gpg_install_prefix
        export LD_LIBRARY_PATH=$GPG_INSTALL_PREFIX/lib:$LD_LIBRARY_PATH
        export PATH=$GPG_INSTALL_PREFIX/bin:$PATH
        export CPATH=$GPG_INSTALL_PREFIX/include:$CPATH
        export GPG_EXECUTABLE=$GPG_INSTALL_PREFIX/bin/gpg
        ls $GPG_INSTALL_PREFIX
        ls $GPG_INSTALL_PREFIX/bin || echo "no bin"
        # try and have travis cache this
        if [[ ! -f "$GPG_INSTALL_PREFIX/bin/gpg" ]]; then
            # This part of the script installs a newer version of GPG on the CI
            # machine so we can sign our releases.
            mkdir -p $GPG_INSTALL_PREFIX
            echo $GPG_INSTALL_PREFIX
            OLD=$(pwd)
            cd $GPG_INSTALL_PREFIX
            pip install ubelt

            ERROR_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.36.tar.bz2',
                hash_prefix='6e5f853f77dc04f0091d94b224cab8e669042450f271b78d0ea0219',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            GCRYPT_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libgcrypt/libgcrypt-1.8.5.tar.bz2',
                hash_prefix='b55e16e838d1b1208e7673366971ae7c0f9c1c79e042f41c03d1',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            KSBA_CRYPT_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libksba/libksba-1.3.5.tar.bz2',
                hash_prefix='60179bfd109b7b4fd8d2b30a3216540f03f5a13620d9a5b63f1f95',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            ASSUAN_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libassuan/libassuan-2.5.3.tar.bz2',
                hash_prefix='e7ccb651ea75b07b2e687d48d86d0ab83cba8e2af7f30da2aec',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            NTBLTLS_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/ntbtls/ntbtls-0.1.2.tar.bz2',
                hash_prefix='54468208359dc88155b14cba37773984d7d6f0f37c7a4ce13868d',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            NPTH_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/npth/npth-1.6.tar.bz2',
                hash_prefix='2ed1012e14a9d10665420b9a23628be7e206fd9348111ec751349b',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            GPG_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/gnupg/gnupg-2.2.17.tar.bz2',
                hash_prefix='a3cd094addac62b4b4ec1683005a2bec761ea2aacf6daf904316b',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")

            tar xjf $ERROR_FPATH
            tar xjf $GCRYPT_FPATH
            tar xjf $KSBA_CRYPT_FPATH
            tar xjf $ASSUAN_FPATH
            tar xjf $NTBLTLS_FPATH
            tar xjf $NPTH_FPATH
            tar xjf $GPG_FPATH
            (cd libgpg-error-1.36 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libgcrypt-1.8.5 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libksba-1.3.5 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libassuan-2.5.3 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd ntbtls-0.1.2 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd npth-1.6 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd gnupg-2.2.17 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            echo "GPG_EXECUTABLE = '$GPG_EXECUTABLE'"
            cd $OLD
        fi
    # Decrypt and import GPG Keys / trust
    - $GPG_EXECUTABLE --version
    - openssl version
    - $GPG_EXECUTABLE --list-keys
    - TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
    - TSP=$CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_secret_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - $GPG_EXECUTABLE --list-keys
    - MB_PYTHON_TAG=$(python -c "import setup; print(setup.MB_PYTHON_TAG)")
    - VERSION=$(python -c "import setup; print(setup.VERSION)") 
    - |
        pip install twine
        if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
          pip install six pyopenssl ndg-httpsclient pyasn1 -U --user
          pip install requests[security] twine --user
        elfi
        if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
          pip install six twine
          pip install --upgrade pyOpenSSL
        fi
    # Package and publish to pypi (if on release)
    - |
        echo "TRAVIS_BRANCH = $TRAVIS_BRANCH"

        KEYID=$(cat dev/public_gpg_key)
        echo "KEYID = '$KEYID'"
        if [[ "$TRAVIS_BRANCH" == "release" ]]; then
            export CURRENT_BRANCH=$TRAVIS_BRANCH
            TAG_AND_UPLOAD=yes
        else
            TAG_AND_UPLOAD=no
        fi
        MB_PYTHON_TAG=$MB_PYTHON_TAG \
            USE_GPG=True \
            GPG_KEYID=$KEYID \
            CURRENT_BRANCH=$TRAVIS_BRANCH \
            TWINE_PASSWORD=$TWINE_PASSWORD \
            TWINE_USERNAME=$TWINE_USERNAME \
            GPG_EXECUTABLE=$GPG_EXECUTABLE \
            DEPLOY_BRANCH=release \
            TAG_AND_UPLOAD=$TAG_AND_UPLOAD \
            ./publish.sh
